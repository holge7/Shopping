package holge.shopping.loginservice.unittest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import com.github.andrewoma.dexx.collection.Set;
import com.google.gson.Gson;

import commons.dto.ApiResponse;
import commons.dto.UserDTO;
import commons.enums.ERol;
import holge.shopping.loginservice.security.JwtUtils;
import holge.shopping.loginservice.service.LoginService;

@ExtendWith(MockitoExtension.class)
public class LoginServiceTest {
	
	/*
	 * VARS
	 */
	private LoginService loginService;
	
    private final String email = "test@test.com";
    private final String name = "testName";
    private final String password = "testPassword";
    private final Set<ERol> rolSet = new HashSet<ERol>(Arrays.asList(ERol.ROLE_ADMIN));
	
	/*
	 * MOCKS
	 */
	  
	  @Mock
	  private JwtUtils jwtUtils;
	  
	  @Mock
	  private RestTemplate restTemplate;
	  
	  @Mock
	  private Gson gson;
	
	  
	/*
	 * PREPARE
	 */
	
	@BeforeEach
	public void tearUp() {
		this.loginService = new LoginService(jwtUtils, restTemplate, gson);
	}
	
	@AfterEach
	public void tearDown() {
		
	}
	
	/*
	 * TEST
	 */
	
	@Test
	public void loginSuccess() {
		UserDTO userDTO = new UserDTO(email, "testName", "testRol");
	    ApiResponse apiResponse = new ApiResponse(false, "", userDTO);
	    String apiResponseJson = new Gson().toJson(apiResponse);
	    
	    when(restTemplate.postForEntity("http://user-service/api/user/login", user, String.class))
	      .thenReturn(new ResponseEntity<>(apiResponseJson, HttpStatus.OK));
	    
	    when(gson.fromJson(apiResponseJson, ApiResponse.class)).thenReturn(apiResponse);
	    when(gson.fromJson(gson.toJson(apiResponse.getData()), UserDTO.class)).thenReturn(userDTO);
	    
	    String tokenString = "testToken";
	    when(jwtUtils.generateJwtToken(userDTO)).thenReturn(tokenString);
	    
	    ApiResponse result = loginService.login(email, password);
	    
	    assertEquals(false, result.isError());
	    assertEquals("", result.getMsg());
	    assertEquals(tokenString, ((LoginResponse) result.getData()).getToken());
	    assertEquals("testName", ((LoginResponse) result.getData()).getName());
	    assertEquals(email, ((LoginResponse) result.getData()).getEmail());
	    assertEquals("testRol", ((LoginResponse) result.getData()).getRol());
	}
	
}
